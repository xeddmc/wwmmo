package au.com.codeka.warworlds.common.proto;

import "au/com/codeka/warworlds/common/proto/common.proto";
import "au/com/codeka/warworlds/common/proto/design.proto";

// Represents a colony that's on a planet.
message Colony {
  // The ID of this colony, so that it can be referred to by other entities.
  optional int64 id = 1;

  // The ID of the empire that owns this colony.
  optional int64 empire_id = 2;

  // The population of the colony.
  optional float population = 3;

  // The "focus" of this colony.
  optional ColonyFocus focus = 4;

  // After simulating, these will contain the delta values (i.e. how much do the goods or whatever
  // changed in this colony) per hour.
  optional float delta_population = 5;
  optional float delta_goods = 6;
  optional float delta_minerals = 7;
  optional float delta_energy = 8;

  // The colony's defence bonus, which when multiplied by one quarter of the population gives the
  //colony's total defence score.
  optional float defence_bonus = 9;

  // If set, this is the time the "cooldown" period ends. While in cooldown, the colony will not
  //lose population
  optional int64 cooldown_end_time = 10;

  // collection of buildings in this colony.
  repeated Building buildings = 11;

  // List of current build requests.
  repeated BuildRequest build_requests = 12;
}

// The "focus" of the colony. The values here should all add up to 1.0.
message ColonyFocus {
  optional float farming = 1;
  optional float mining = 2;
  optional float construction = 3;
  optional float energy = 4;
}

// Represents a completed building in a colony.
message Building {
  // A unique ID for this building.
  optional int64 id = 4;

  // The type of the design of this building
  optional Design.DesignType design_type = 1;

  // The level of this building
  optional int32 level = 2;

  // Not as useful for buildings (compared to fleets, say), but notes the player can attach.
  optional string notes = 3;
}

// A build request is an in-progress build for the current colony.
message BuildRequest {
  optional int64 id = 1;

  // The type of the design being created.
  optional Design.DesignType design_type = 2;

  // If we're upgrading a building, the building we're upgrading.
  optional int64 building_id = 11;

  // The number of things being created. Required when building ships, otherwise ignored.
  optional int32 count = 3;

  // The start and end time of this build, in millis since epoch.
  optional int64 start_time = 4;
  optional int64 end_time = 5;

  // The "progress" of the build, from 0 (just started) to 1.0 (complete). It's not always going to
  // relate to start_time/end_time (due to lack of resources, changing focus etc).
  optional float progress = 6;

  // The "efficiency" of the minerals/populations. These values will together add up to 1, and will
  // describe the relative efficiency of the minerals/population you have. That is,
  optional float minerals_efficiency = 7;
  optional float population_efficiency = 8;

  // The amount of progress we're making per step, so we can update counters and stuff in real-time.
  optional float progress_per_step = 9;

  // The delta of goods per hour this build request is CURRENTLY using.
  optional float delta_minerals_per_hour = 10;
}
