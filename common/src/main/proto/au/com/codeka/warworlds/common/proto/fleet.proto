package au.com.codeka.warworlds.common.proto;

import "au/com/codeka/warworlds/common/proto/common.proto";
import "au/com/codeka/warworlds/common/proto/design.proto";

// A fleet represents one or more ships of the same(?) design.
message Fleet {
  // ID of this fleet, so that it can be referred to by other entities.
  optional int64 id = 1;

  // The ID of the empire who owns this fleet
  optional int64 empire_id = 2;

  // The ID of the alliance this fleet belongs to. If not specified, it means the empire that owns
  // this fleet does not belong to an alliance.
  optional int64 alliance_id = 3;

  // The ID of the ship design of the ship(s) in this fleet
  optional Design.DesignType design_type = 4;

  // The number of ships in this fleet. This is a floating point number because of the way damage is
  // calculated in combat. We only ever display the Math.ceil() of this number to the user, however.
  optional float num_ships = 5;

  // The current state of the fleet: idle == orbiting a star, moving == moving between stars,
  //attacking == attacking an enemy fleet, colony, etc
  enum FLEET_STATE {
    IDLE = 1;
    MOVING = 2;
    ATTACKING = 3;
  }
  optional FLEET_STATE state = 6;

  // The time this fleet was moved into the current state (used to determine things like distance
  // between planets when moving, etc)
  optional int64 state_start_time = 7;

  // If we're moving, this will be the ID of the star we're moving to.
  optional int64 destination_star_id = 8;

  // If in attacking state, this is the target fleet or colony we're attacking. Only makes sense if
  // the fleet is on the same star as the target.
  optional int64 target_fleet_id = 9;

  // The stance of the fleet is how we react when an enemy fleet comes into our airspace: passive
  // == ignore them (even if they attack first), neutral == attack if they attack first, aggressive
  // == attack no matter what
  enum FLEET_STANCE {
    PASSIVE = 1;
    NEUTRAL = 2;
    AGGRESSIVE = 3;
  }
  optional FLEET_STANCE stance = 10;

  // This is used internally by the server, it'll never appear in a response from the server.
  optional bool is_destroyed = 11;
  optional bool block_notification_on_destroy = 12;

  // This is the date/time of the last battle this fleet was victorious in, it's mostly useless on
  // the client (used for some housekeeping on the server)
  optional int64 last_victory = 13;

  // for moving fleets, this is the time we expect it to arrive
  optional int64 eta = 14;

  // notes the player has attached so that he can remember what the fleet was for.
  optional string notes = 15;

  // The amount of the fuel in this fleet's tanks. The maximum amount is controlled by the design.
  optional float fuel_amount = 16;

  // a collection of upgrades to this fleet
//  repeated FleetUpgrade upgrades = 16;
}
