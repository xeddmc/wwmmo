package au.com.codeka.warworlds.common.proto;

import "au/com/codeka/warworlds/common/proto/common.proto";

// Design is all the details of something we can build: buildings and ships.
message Design {
  // The type of the design, all designs have a unique type.
  enum DesignType {
    UNKNOWN_DESIGN = 0;
    COLONY_SHIP = 1;
    SCOUT = 2;
    FIGHTER = 3;
    TROOP_CARRIER = 4;
    WORMHOLE_GENERATOR = 5;

    SHIPYARD = 101;
    SILO = 102;
    RESEARCH = 103;
    GROUND_SHIELD = 104;
    BIOSPHERE = 105;
    HQ = 106;
    RADAR = 107;
    WORMHOLE_DISRUPTOR = 108;
  }
  optional DesignType type = 1;

  // The name of this design that we'll present to the user.
  optional string display_name = 2;

  // The longer description of the design.
  optional string description = 3;

  // The details of the cost of this build.
  message BuildCost {
    // The number of minerals this design takes to build one instance.
    optional int32 minerals = 1;
    // The population need to build one instance of this design.
    optional int32 population = 2;
    // The maximum number of instances of this design you can build at once.
    optional int32 max_count = 3;
  }
  optional BuildCost build_cost = 4;

  // The URL of the image/icon for this design.
  optional string image_url = 5;

  // The kind of this design: ship or building.
  enum DesignKind {
    UNKNOWN_KIND = 0;
    BUILDING = 1;
    SHIP = 2;
  }
  optional DesignKind design_kind = 6;

  // The details of the dependency you need before you can build this design.
  message Dependency {
    // The DesignType of the design you need.
    optional DesignType type = 1;
    // The level of the design you need.
    optional int32 level = 2;
  }
  repeated Dependency dependencies = 7;

  // The effect this design has, this is where the building/ship actually gets it's behavior. This
  // allows us to have multiple, say, fighting ships which have the same base behavior but with
  // different stats.
  enum EffectType {
    UNKNOWN_EFFECT = 0;
    FIGHTER_SHIP = 1;
    SCOUT_SHIP = 2;
    EMPTY_SPACE_MOVER = 4;

    STORAGE = 101;
    DEFENCE = 102;
    POPULATION_BOOST = 103;
    RADAR_SCAN = 104;
    WORMHOLE_DISRUPT = 105;
    RADAR_ALERT = 106;
  }

  // The additional stats for the effect this design has.
  message Effect {
    optional EffectType type = 1;

    // The range of the effect, useful for RADAR_SCAN, WORMHOLE_DISRUPT, RADAR_ALERT.
    optional float range = 2;

    // The goods this effect adds/requires/etc. Useful for STORAGE.
    optional int32 goods = 3;
    // The minerals this effect adds/requires/etc. Useful for STORAGE.
    optional int32 minerals = 4;
    // The energy this effect adds/requires/etc. Useful for STORAGE.
    optional int32 energy = 5;

    optional float bonus = 6;
    optional int32 minimum = 7;
  }
  repeated Effect effect = 8;

  // The maximum of this design allowed per colony.
  optional int32 max_per_colony = 9;

  // The maximum of this design allowed for your entire empire.
  optional int32 max_per_empire = 10;

  // Whether this design's icon should be shown in the solar system
  optional bool show_in_solar_system = 11;

  enum UpgradeType {
    UNKNOWN_UPGRADE = 0;
    CLOAK = 1;
    BOOST = 2;
    CRYOGENICS = 3;
  }

  message Upgrade {
    optional UpgradeType type = 1;
    optional string display_name = 2;
    optional string description = 3;
    optional BuildCost build_cost = 4;
    optional string image_url = 5;
    repeated Dependency dependencies = 6;
    repeated Effect effects = 7;
  }
  repeated Upgrade upgrades = 12;

  optional float speed_px_per_hour = 13;

  optional float fuel_cost_per_px = 14;

  optional float base_attack = 15;

  optional float base_defence = 16;

  optional int32 combat_priority = 17;

  // The size of this design's "fuel tank", how much fuel it will carry with it, by default.
  optional int32 fuel_size = 18;
}

message Designs {
  repeated Design designs = 1;
}