package au.com.codeka.warworlds.common.proto;

import "au/com/codeka/warworlds/common/proto/common.proto";
import "au/com/codeka/warworlds/common/proto/empire.proto";

message NewAccountRequest {
  optional string empire_name = 1;
}

message NewAccountResponse {
  optional string cookie = 1;
  optional string message = 2;
}

// The request for /accounts/associate requests to associate an email address with an account.
message AccountAssociateRequest {
  optional string cookie = 1;
  optional string email_addr = 2;

  // If the email address is associated with another account, or the empire already has an email
  // associated with it, we'll return an error unless force is true, in which case we'll do it
  // anyway.
  optional bool force = 3;
}

message AccountAssociateResponse {
  enum AccountAssociateStatus {
    STATUS_UNKNOWN = 0;
    SUCCESS = 1;

    // The account is already associated with another email address, and cannot be associated with
    // this one.
    ACCOUNT_ALREADY_ASSOCIATED = 2;

    // The email address is already associated with a different account, cannot be associated with
    // this new account.
    EMAIL_ALREADY_ASSOCIATED = 3;

    // Some other unexpected error.
    UNEXPECTED_ERROR = 4;

    // The association hasn't happened yet.
    NOT_VERIFIED = 5;
  }
  optional AccountAssociateStatus status = 1;
}

// This is the account object that's stored in the data store. It links to your empire and other
// details about your account.
message Account {
  optional int64 empire_id = 1;

  // If this account is associated with an email address, this is the email address they actually
  // entered (and the one we should send email notifications to, etc.
  optional string email = 2;

  // We do some basic "canonicalization" of email address so that you can't just sign up with
  // automtic aliases or something (e.g. in gmail foo@gmail.com and foo+bar@gmail.com are actually
  // the same account). This is only fairly basic, and not really meant to be totally secure.
  optional string email_canonical = 3;

  // The status of the email address. Only verified email addresses "count".
  enum EmailStatus {
    EMAIL_STATUS_UNKNOWN = 0;
    UNVERIFIED = 1;
    VERIFIED = 2;

    // The address used to be associated with this account, but it was abandoned for another.
    ABANDONED = 3;
  }
  optional EmailStatus email_status = 4;

  // The code we generated and sent the user to verify their email address.
  optional string email_verification_code = 5;
}

// This is sent to the /login endpoint in order to log in to the server.
message LoginRequest {
  // Your login cookie. Required.
  optional string cookie = 1;

  // The DeviceInfo of the device you're logging in from.
  optional DeviceInfo device_info = 2;
}

// This is sent from the /login endpoing in response to a LoginRequest.
message LoginResponse {
  enum LoginStatus {
    LOGINSTATUS_UNKNOWN = 0;

    // Login was successful.
    SUCCESS = 1;
  }
  optional LoginStatus status = 1;

  // The host to connect to.
  optional string host = 2;

  // The port to connect to.
  optional int32 port = 3;

  // If specified, the Empire you're currently logged in as (if not specified, it means
  // you haven't set up an empire yet, and you should do that before anything else...)
  optional Empire empire = 4;

  // If true, it means we need to re-register with GCM (maybe because last time it failed)
  optional bool require_gcm_register = 5;

  // If true, we'll force the ads to be removed. If false, or not specified, we'll check
  // whatever the In-App Purchase API has to say.
  optional bool force_remove_ads = 6;
}

// Contains details about a device, such as it's ID, model etc. Also contains details about the
// device's GCM registration (so we can send it GCM messages).
message DeviceInfo {
  // The identifier of the device. You can have multiple accounts on one device, this
  // will then refer to the device itself.
  optional string device_id = 1;

  // The value of android.os.Build.MODEL for this device
  optional string device_model = 2;

  // The value of android.os.Build.MANUFACTURER for this device
  optional string device_manufacturer = 3;

  // The value of android.os.Build.DISPLAY for this device
  optional string device_build = 4;

  // The value of android.os.Build.VERSION.RELEASE for this device (note that this can
  // change if you upgrade the OS without re-registering your device!)
  optional string device_version = 5;

  // The Firebase Cloud Messaging info about the device.
  optional FcmDeviceInfo fcm_device_info = 6;
}

// Contains details about the Firebase Cloud Messaging device.
message FcmDeviceInfo {
  // A token needed to message this device.
  optional string token = 1;

  // The device ID that firebase reports.
  optional string device_id = 2;
}

// Contains the request parameters for /account/patreon-begin.
message PatreonBeginRequest {
  // The EmpireID of the requesting empire. Must match who you're authenticated as.
  optional int64 empire_id = 1;
}

// Contains the response to a /account/patreon-begin request, that is, all the stuff needed to start
// the Patreon OAuth handshake.
message PatreonBeginResponse {
  // Client ID. Required.
  optional string client_id = 1;

  // Redirect URI. Required.
  optional string redirect_uri = 2;

  // The state that we pass to Patreon, that'll get passed back to our Redirect URI.
  optional string state = 3;
}
