buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'org.ajoberstar:grgit:1.5.0'
  }
}

import org.ajoberstar.grgit.Grgit

apply plugin: 'com.android.application'

Properties signingProps = new Properties()
File signingPropsFile = new File("signing.properties")
if (signingPropsFile.isFile()) {
  signingProps.load(new FileInputStream(signingPropsFile))
}

android {
  compileSdkVersion 25
  buildToolsVersion "26.0.0-rc1"

  defaultConfig {
    applicationId "au.com.codeka.warworlds2"
    minSdkVersion 19
    targetSdkVersion 25
    versionCode getVersionCodeFromGit()
    versionName "2.0"
    multiDexEnabled true
  }
  compileOptions {
    sourceCompatibility 1.8
    targetCompatibility 1.8
  }
  signingConfigs {
    release {
      storeFile file(signingProps['keystore'] == null ? "/tmp/non-existant" : signingProps['keystore'])
      storePassword signingProps['password']
      keyAlias signingProps['alias']
      keyPassword signingProps['password']
    }
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release

      buildConfigField "String", "DEFAULT_SERVER", "\"http://wwmmo.codeka.com.au/\""
    }
    debug {
      buildConfigField "String", "DEFAULT_SERVER", "\"http://192.168.1.3:8080/\""
    }
  }
  packagingOptions {
    // These get added twice from different dependencies, so just ignore them.
    exclude 'LICENSE-EPL-1.0.txt'
    exclude 'LICENSE-EDL-1.0.txt'
  }
}

def deployPath = file("${rootDir}/../deploy/${project.name}")

def publish = project.tasks.create("publishAll")
def deploy = project.tasks.create("deploy")

android.applicationVariants.all { variant ->
  variant.outputs.each { output ->
    if (variant.versionName) {
      version "${variant.versionName}.${variant.versionCode}"
    } else {
      version "${variant.versionCode}"
    }

    def task = project.tasks.create("publish${variant.name.capitalize()}", Copy)
    task.from(output.outputFile)
    task.into(deployPath)
    task.rename('.*', "wwmmo2-${variant.name}-${version}.apk")
    task.dependsOn variant.assemble
    publish.dependsOn task
    if (variant.name == "release") {
      deploy.dependsOn task
    }
  }
}

def getVersionCodeFromGit() {
  // Same as running:
  // git rev-list <checked out branch name> | wc -l
  return Grgit.open().log().size()
}

dependencies {
  compile 'com.andkulikov:transitionseverywhere:1.6.3'
  compile 'com.android.support:appcompat-v7:25.3.1'
  compile 'com.android.support:preference-v7:25.3.1'
  compile 'com.google.android.gms:play-services-base:10.2.1'
  compile 'com.google.firebase:firebase-core:10.2.1'
  compile 'com.google.firebase:firebase-messaging:10.2.1'
  compile 'com.google.guava:guava:20.0'
  compile 'com.squareup.picasso:picasso:2.5.2'
  compile project(':common')
}

apply plugin: 'com.google.gms.google-services'